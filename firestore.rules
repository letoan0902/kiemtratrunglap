rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for validation
    function isValidEmail(email) {
      return email.matches('.*@.*\\..*');
    }
    
    function isValidUserData(data) {
      return data.keys().hasAll(['email', 'name', 'role', 'isActive']) &&
             data.role in ['admin', 'user'] &&
             data.isActive is bool &&
             data.email is string &&
             data.name is string;
    }
    
    function isValidFieldData(data) {
      return data.keys().hasAll(['name', 'isActive']) &&
             data.isActive is bool &&
             data.name is string;
    }
    
    // Users collection - More permissive for app functionality
    match /users/{userId} {
      // Allow read for any valid operation (app controls access)
      allow read: if true;
      
      // Allow create with valid structure
      allow create: if isValidEmail(userId) &&
                      isValidUserData(resource.data) &&
                      resource.data.email == userId;
      
      // Allow update with some restrictions
      allow update: if isValidEmail(userId) &&
                      isValidUserData(request.resource.data) &&
                      request.resource.data.email == userId;
      
      // Allow delete (controlled by app logic)
      allow delete: if true;
    }
    
    // Fields collection - Allow app to manage fields
    match /fields/{fieldId} {
      // Allow read for all fields (app controls which user sees what)
      allow read: if true;
      
      // Allow create with valid structure
      allow create: if isValidFieldData(resource.data);
      
      // Allow update with structure validation
      allow update: if isValidFieldData(request.resource.data);
      
      // Allow delete (app controls permissions)
      allow delete: if true;
    }
    
    // Activity logs - Allow for monitoring
    match /activity_logs/{logId} {
      allow read, write: if true;
    }
    
    // Test collection for debugging (temporary)
    match /test/{docId} {
      allow read, write: if true;
    }
    
    // Block access to other collections for security
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 