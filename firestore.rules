rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for validation
    function isValidEmail(email) {
      return email.matches('.*@.*\\..*');
    }
    
    function isValidUserData(data) {
      // More flexible validation - check required fields exist
      return data.keys().hasAll(['email', 'name', 'role', 'isActive']) &&
             data.role in ['admin', 'user'] &&
             data.isActive is bool &&
             data.email is string &&
             data.name is string &&
             // Allow additional fields like username, password, etc.
             (data.username is string || !data.keys().hasAny(['username'])) &&
             (data.password is string || !data.keys().hasAny(['password'])) &&
             (data.assignedFields is list || !data.keys().hasAny(['assignedFields']));
    }
    
    function isValidFieldData(data) {
      return data.keys().hasAll(['name', 'isActive']) &&
             data.isActive is bool &&
             data.name is string &&
             // Allow additional fields
             (data.description is string || !data.keys().hasAny(['description'])) &&
             (data.data is list || !data.keys().hasAny(['data']));
    }
    
    // Users collection - Allow admin to create users
    match /users/{userId} {
      // Allow read for any valid operation
      allow read: if true;
      
      // Allow create with flexible validation - admin can create users
      allow create: if isValidEmail(userId) &&
                      isValidUserData(resource.data) &&
                      resource.data.email == userId;
      
      // Allow update with flexible validation
      allow update: if isValidEmail(userId) &&
                      // Allow partial updates
                      (request.resource.data.email == userId || 
                       request.resource.data.email == resource.data.email);
      
      // Allow delete (app controls permissions)
      allow delete: if true;
    }
    
    // Fields collection - Allow admin to manage fields
    match /fields/{fieldId} {
      // Allow read for all fields
      allow read: if true;
      
      // Allow create with flexible validation
      allow create: if isValidFieldData(resource.data);
      
      // Allow update with flexible validation
      allow update: if true; // App controls the logic
      
      // Allow delete
      allow delete: if true;
    }
    
    // Activity logs - Allow for monitoring
    match /activity_logs/{logId} {
      allow read, write: if true;
    }
    
    // Test collection for debugging (temporary)
    match /test/{docId} {
      allow read, write: if true;
    }
    
    // Block access to other collections for security
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 